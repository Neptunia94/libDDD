This program shows an example of the generation space states of the Game Tic-Tac-Toe (Morpion in French) using DDD.

It is meant as a small tutorial, and shows how to write ad-hoc homomorphisms to represent a given transition relation.

Requirements :
 - the Boost Library >= 1.34
 - the libDDD library

Command line :
 ./morpionv2 <LINE_SIZE=3>
 
 <LINE_SIZE> : The number of Cells in each line. The full grid is a square. The default is 3,  for a standard 3x3 grid.
 
Files:
    hom/const ==> Define types and constants used in the Morpion
    hom/general_v2 ==> Define basic operation to:
        1) Build the Initial State of the Morpion (i.e.a DDD representing an empty grid, no one has played yet)
        2) Build the homomorphism for
            - PlayAnyFreeCell (X) = Play one of the possible move for player X
            - CheckIsWinner  = Check if one of the players has won 
            - CheckIsNoWinner = Check if there is no winner configuration (Negation of the previous function)
    hom/notew ==> A homomorphism used to mark configurations in which a player has won 
    hom/play ==> Homomorphism used to play one move
    hom/winner ==> Homomorphism used to build by composition the winner configuration tester CheckIsWinner
    morpionv2 ==> Program Main


Questions / Answers :
 
**** What is the Initial DDD State ?
 For each cell in game, we create one DDD variable.
 DDD variables are integers, thus the variable grid[i][j] = i * <LINE_SIZE> + j

 Valuation on each arc can get three walue :
    0 : Cell played by Player A
    1 : Cell player by Player B
   -1 : Empty Cell

At the top of the DDD, we add one variable called STATE to represent the status of the game, which can take 4 values
    -1 : It is to Player A to play 
    -2 : It is to Player B to play
     0 : The current configuration have been won by player A
     1 : The current configuration have been won by player B
     
Example of Initial DDD for TicTacToe 3x3
STATE -|-1|> 
    0 -|-1|> 
        1 -|-1|> 
            2 -|-1|> 
                3 -|-1|> 
                    4 -|-1|> 
                        5 -|-1|> 
                            6 -|-1|> 
                                7 -|-1|> 
                                    8 -|-1|> 
                                        9 -|-1|> 
                                            TERMINAL [1]

 i.e. All cells empty, and STATE indicates that player A should play first.

 
**** How to identify winning configurations ?
 For this we use composition homomorphism of a "winner" homomorphism.
 Basically, it tests if the the player's token is in the the specified cell.

 For example, for a 3x3 TicTacToe :
 
  winner(A,0) & winner(A,1) & winner(A,2) :
  XXX
  ...
  ...
  
  winner(A,0) & winner(A,3) & winner(A,6) :
  X..
  X..
  X..
 
 Then to obtain all possible winning configuration of the game for one player, we use the Union.
   

**** How to define configurations in which there is no winner ?

For this, we simply use the negation of the homomorphism "checkIsWinner".
Negation of a homomorphism is only available for "Selector" homomorphisms, i.e. \forall s \in SDD, h(s) \subseteq s.
It yields a complement homomorphism, i.e. \forall s \in SDD, !h(s) = s \setminus h(s).

The is_selector() member predicate in homomorphisms allows users to tag this property, hence allow use of operator!, ITE and other selector features.

**** How to obtain all game configurations ? 

We build several homomorphisms in the main program:

nextAA ==> Play all possible moves of one player (can be A or B, and flip the variable STATE from A to B)
winnerA ==> Check if there is a winning configuration for player A
winnerB ==> Check if there is a winning configuration for player B
noWinner ==> Check if there is no winner
notewA ==> Note a winner a configuration for player A (update STATE variable)
notewB ==> Note a winner a configuration for player B (update STATE variable)

notewA & winnerA ==> If current configuration is winning for player A, update the STATE
notewB & winnerB ==> If current configuration is winning for player A, update the STATE
nextAA & nowinner ==> If no winner currently detected, play a move (for the current player as designated by STATE), and update STATE.

The full transition relation is then the union of these three possibilities: 

Trans =  (notewA & winnerA) + (notewB & winnerB) + (nextAA & nowinner)

Then, to obtain all reachable configurations, we compute a least fixpoint, with Id (the identity homomorphism) to accumulate states in the result.

reach = fixpoint( Trans + Id ) ( InitialState ) 


**** Detailed Homomorphism Description:

---- notew (PlayerID the_winner)----
Used to note a winning configuration in variable STATE 
ALGO :
Terminal ==> Error
PHI(vr,vl)
    If vr == SYSTEM_STATE
        return vr -|the_winner|-> ID
        
---- play (CellID the_cell, PlayerID the_player) ----
Used to play a move of one player (PA or PB).
Rules are:  A player can play iff
    - STATE indicates that it is his turn to play
    - STATE indicates there is no current winner
    - The cell the player wants to play in is empty.
ALGO :
Terminal ==> Error
PHI(vr,vl)
    If vr == SYSTEM_STATE
        If vl == TO_PA && the_player == PA (It is to player A to play)
            return vr -|TO_PB|-> Propagation_to_next(the_cell,the_player)
        If vl == TO_PB && the_player == PB (It is to player B to play)
            return vr -|TO_PA|-> Propagation_to_next(the_cell,the_player)
        Else
            return ZERO
            
    if vr == the_cell
        if vl == EMPTY
            return vr -|the_player|-> ID
        else
            return ZERO

---- winner (CellID the_cell, PlayerID the_player) ----
Used only to check if a given cell has been taken by a specific player, and by composition, we can check
if there are some winning configurations for a specific player
ALGO :
Terminal ==> Error
PHI(vr,vl)
    If vr == the_cell
        If vl == the_player
            return vr -|vl|-> ID
        Else
            return ZERO
This homomorphism implements is_selector() predicate by "return true".
This is used to allow use of its negation.

   